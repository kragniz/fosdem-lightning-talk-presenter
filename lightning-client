#!/usr/bin/env python3

import json
import sys
import os
import math
import urllib.request
from datetime import datetime, timedelta
from dataclasses import dataclass
from enum import Enum

import gi

gi.require_version("Gtk", "4.0")
gi.require_version("Adw", "1")
gi.require_version("Poppler", "0.18")
from gi.repository import Gtk, Adw, Gdk, Gio, GLib
from gi.repository.GdkPixbuf import Pixbuf, InterpType
from gi.repository import Pango, PangoCairo
from gi.repository import Poppler


@dataclass
class Talk:
    title: str
    speakers: list
    slides_name: str
    slides_url: str


class Session:
    def __init__(self, talks_json):
        self.talks = self.create_talks(talks_json)

    def create_talks(self, json_talks):
        talks = []
        for t in json_talks:
            talks.append(
                Talk(
                    title=t.get("title"),
                    speakers=t.get("speakers"),
                    slides_name=t.get("slides_name"),
                    slides_url=t.get("slides_url"),
                )
            )
        return talks

    def fetch_talk_slides(self):
        os.makedirs("slides", exist_ok=True)

        for talk in self.talks:
            path = os.path.join("slides", talk.slides_name)
            if not os.path.isfile(path):
                print(f"{path} isn't available locally, fetching...")
                urllib.request.urlretrieve(talk.slides_url, path)

class Mode(Enum):
    INTRO = 1
    TITLE = 2
    PRESENTATION = 3


@dataclass
class State:
    mode: Mode
    current_talk_time_end: datetime
    current_intro_time_start: datetime
    time_left: timedelta
    session: Session
    page: int
    talk: int

    def get_current_talk(self):
        return self.session.talks[self.talk]

    def get_next_talk(self):
        offset = 0
        if self.talk < len(self.session.talks) - 1:
            offset = 1
        return self.session.talks[self.talk + offset]

    def get_current_speaker(self):
        talk = self.get_current_talk()
        return talk.speakers

    def get_next_speaker(self):
        talk = self.get_next_talk()
        return talk.speakers

    def get_time_remaining(self):
        if self.mode != Mode.PRESENTATION:
            return "05:00"
        else:
            hours, remainder = divmod(self.time_left.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)
            return f"{minutes:02d}:{seconds:02d}"

    def move_to_next_talk(self):
        self.mode = Mode.INTRO
        self.page = 0
        self.talk += 1
        self.current_intro_time_start = datetime.now()
        self.time_left = timedelta(minutes=5)
        self.current_talk_time_end = datetime.now() + timedelta(minutes=5)


TITLE_FONT = "Inter Bold 20"
TITLE_FONT_DEC = Pango.font_description_from_string(TITLE_FONT)
AUTHOR_FONT = "Inter Normal 10"
AUTHOR_FONT_DEC = Pango.font_description_from_string(AUTHOR_FONT)
TIMER_FONT = "Inter Bold 50"
TIMER_FONT_DEC = Pango.font_description_from_string(TIMER_FONT)
DEFAULT_WIDTH = 453.543
DEFAULT_HEIGHT = 255.118
TITLE_BACKGROUND = (0.99, 0.97, 0.99)
FOSDEM_PURPLE = (0.671, 0.106, 0.576)


class MainWindow(Adw.ApplicationWindow):
    def __init__(self, state, *args, **kwargs):
        super().__init__(title="Slides", *args, **kwargs)
        self.state = state

        self.is_fullscreen = False
        self.set_default_size(DEFAULT_WIDTH * 2, DEFAULT_HEIGHT * 2)

        evk = Gtk.EventControllerKey.new()
        evk.connect("key-pressed", self.key_press)
        self.add_controller(evk)

        self.logo_pixbuf = Pixbuf.new_from_file("images/logo-gear.png")
        self.logo_pixbuf_w = self.logo_pixbuf.get_width()
        self.logo_pixbuf_h = self.logo_pixbuf.get_height()

        self.dw = Gtk.DrawingArea()

        self.dw.set_hexpand(True)
        self.dw.set_vexpand(True)

        self.dw.set_draw_func(self.draw, None)
        self.set_content(self.dw)

        self.update_talk()

    def update_talk(self):
        self.doc = Poppler.Document.new_from_file(
            "file://"
            + os.path.abspath(
                os.path.join("slides", self.state.get_current_talk().slides_name)
            )
        )
        self.pages_count = self.doc.get_n_pages()
        print(f"got {self.pages_count=}")
        self.update_page()
        print(f"{self.page.get_size()=}")

    def update_page(self):
        print(f"setting page to {self.state.page=}")
        self.page = self.doc.get_page(self.state.page)
        self.page_x, self.page_y = self.page.get_size()
        self.dw.queue_draw()

    def ease_out_cubic(self, x):
        if x < 0.5:
            return 4 * (x**3)
        else:
            return 1 - ((-2 * x + 2) ** 3) / 2

    def ease_out_quint(self, x):
        return 1 - (1 - x) ** 5

    def ease_out_elastic(self, x):
        c4 = (2 * math.pi) / 3

        if x <= 0:
            return 0.0
        elif x >= 1:
            return 1.0
        else:
            return 2 ** (-10 * x) * math.sin((x * 10 - 0.75) * c4) + 1

    def draw(self, area, c, w, h, data):
        if self.state.mode == Mode.INTRO:
            self.draw_intro(area, c, w, h, data)
        if self.state.mode == Mode.PRESENTATION:
            self.draw_presentation(area, c, w, h, data)

    def draw_presentation(self, area, c, w, h, data):
        c.set_source_rgb(0, 0, 0)
        c.paint()

        c.save()
        width_scale = w / self.page_x
        height_scale = h / self.page_y
        if width_scale > height_scale:
            scale = height_scale
        else:
            scale = width_scale

        c.scale(scale, scale)
        try:
            self.page.render(c)
        finally:
            c.restore()

        fade_time = 10
        if self.state.time_left.seconds <= fade_time:
            c.set_source_rgba(
                *TITLE_BACKGROUND,
                self.ease_out_cubic(
                    1 - self.state.time_left.total_seconds() / fade_time
                ),
            )
            c.paint()

    def draw_intro(self, area, c, w, h, data):
        width_scale = w / DEFAULT_WIDTH
        height_scale = h / DEFAULT_HEIGHT
        if width_scale > height_scale:
            scale = height_scale
        else:
            scale = width_scale
        c.scale(scale, scale)

        c.set_source_rgb(*TITLE_BACKGROUND)
        c.paint()

        intro_time_elapsed = (
            datetime.now() - self.state.current_intro_time_start
        ).total_seconds()

        ease_time = 3
        ease_distance = 1000
        if intro_time_elapsed <= ease_time:
            ease = self.ease_out_quint(intro_time_elapsed / ease_time)
        else:
            ease = 1

        c.save()
        scale = 0.3
        c.scale(scale, scale)
        c.translate(400 * ease - 200, 200)
        circumference = 2 * math.pi * self.logo_pixbuf_w * scale
        rotation = (math.pi * 2) / (
            circumference / (ease * ease_distance)
        ) - 16.6666  # subtract the end rotation so it lines up
        c.rotate(rotation)
        Gdk.cairo_set_source_pixbuf(
            c, self.logo_pixbuf, -self.logo_pixbuf_w / 2, -self.logo_pixbuf_h / 2
        )
        c.paint()
        c.restore()

        c.translate(ease_distance - ease * ease_distance, 0)

        c.set_source_rgb(0.1, 0.1, 0.1)

        layout = PangoCairo.create_layout(c)

        talk = self.state.get_current_talk()

        layout.set_text(talk.title, -1)
        layout.set_font_description(TITLE_FONT_DEC)
        layout.set_width(400000)

        c.save()
        c.set_source_rgb(0.1, 0, 0.1)
        c.move_to(25, 100)
        PangoCairo.show_layout(c, layout)
        c.restore()

        layout.set_text(self.state.get_current_speaker(), -1)
        layout.set_font_description(AUTHOR_FONT_DEC)

        c.save()
        c.set_source_rgb(0.3, 0.2, 0.3)
        c.move_to(25, 200)
        PangoCairo.show_layout(c, layout)
        c.restore()

    def toggle_fullscreen(self):
        self.is_fullscreen = not self.is_fullscreen
        if self.is_fullscreen:
            self.fullscreen()
        else:
            self.unfullscreen()

    def key_press(self, event, keyval, keycode, state):
        if keyval == Gdk.KEY_q and state & Gdk.ModifierType.CONTROL_MASK:
            self.destroy()
        elif keyval == Gdk.KEY_f and state & Gdk.ModifierType.CONTROL_MASK:
            self.toggle_fullscreen()
        elif keyval == Gdk.KEY_space or keyval == Gdk.KEY_Right:
            if self.state.mode == Mode.INTRO:
                print("starting presentation")
                self.state.mode = Mode.PRESENTATION
                self.state.current_talk_time_end = datetime.now() + timedelta(
                    minutes=5
                )
                self.update_page()
            elif self.state.mode == Mode.PRESENTATION:
                self.state.page += 1
                if self.state.page >= self.pages_count:
                    self.state.move_to_next_talk()
                    self.update_talk()
                else:
                    self.update_page()
        elif keyval == Gdk.KEY_Left:
            print("going back a slide")
            if self.state.mode == Mode.PRESENTATION:
                if self.state.page >= 1:
                    self.state.page -= 1
                    self.update_page()


class PreviewWindow(Adw.ApplicationWindow):
    def __init__(self, state, *args, **kwargs):
        super().__init__(title="Preview", *args, **kwargs)
        self.state = state

        self.set_default_size(DEFAULT_WIDTH * 2, DEFAULT_HEIGHT * 2)

        self.dw = Gtk.DrawingArea()

        self.dw.set_hexpand(True)
        self.dw.set_vexpand(True)

        self.dw.set_draw_func(self.draw, None)
        self.set_content(self.dw)

    def draw(self, area, c, w, h, data):
        width_scale = w / DEFAULT_WIDTH
        height_scale = h / DEFAULT_HEIGHT
        if width_scale > height_scale:
            scale = height_scale
        else:
            scale = width_scale
        c.scale(scale, scale)

        foreground = (0.95, 0.95, 0.95)
        background = (0, 0, 0)
        if self.state.time_left.seconds <= 10:
            if self.state.time_left.seconds % 2 == 0:
                foreground, background = background, foreground

        c.set_source_rgb(*background)
        c.paint()

        c.set_source_rgb(*foreground)

        talk = self.state.get_next_talk()

        layout = PangoCairo.create_layout(c)
        layout.set_text(f"NEXT SPEAKER:\n{self.state.get_next_speaker()}".upper(), -1)
        layout.set_font_description(TITLE_FONT_DEC)
        layout.set_width(400000)

        c.save()
        c.set_source_rgb(*foreground)
        c.move_to(25, 25)
        PangoCairo.show_layout(c, layout)
        c.restore()

        layout.set_font_description(TITLE_FONT_DEC)
        layout.set_width(500000)

        if self.state.mode == Mode.INTRO:
            layout.set_text(f"PRESS SPACE TO START TALK", -1)
        if self.state.mode == Mode.PRESENTATION:
            layout.set_text(f"TIME REMAINING:", -1)

        c.save()
        c.set_source_rgb(*foreground)
        c.move_to(25, 120)
        PangoCairo.show_layout(c, layout)
        c.restore()

        layout.set_font_description(TIMER_FONT_DEC)

        layout.set_text(f"{self.state.get_time_remaining()}", -1)

        c.save()
        c.set_source_rgb(*foreground)
        c.move_to(25, 150)
        PangoCairo.show_layout(c, layout)
        c.restore()


class LightningClient(Adw.Application):
    def __init__(self, talks_json, **kwargs):
        super().__init__(**kwargs)
        self.connect("activate", self.on_activate)

        with open(talks_json) as f:
            self.session = Session(json.load(f))

        self.session.fetch_talk_slides()

        self.state = State(
            mode=Mode.INTRO,
            current_talk_time_end=datetime.now(),
            current_intro_time_start=datetime.now(),
            time_left=timedelta(minutes=5),
            session=self.session,
            page=0,
            talk=0,
        )

    def on_activate(self, app):
        self.win = MainWindow(state=self.state, application=app)
        self.win.present()

        self.preview_win = PreviewWindow(state=self.state, application=app)
        self.preview_win.present()

        self.frame_rate = 30

        def update_timer():
            self.preview_win.dw.queue_draw()
            self.win.dw.queue_draw()
            self.state.time_left = self.state.current_talk_time_end - datetime.now()
            if (
                self.state.mode == Mode.PRESENTATION
                and self.state.time_left.seconds <= 0
            ):
                self.state.move_to_next_talk()
                self.win.update_talk()
            GLib.timeout_add(1000 / self.frame_rate, update_timer)

        GLib.timeout_add(1000 / self.frame_rate, update_timer)


app = LightningClient("talks.json", application_id="org.fosdem.LightningTalkClient")
app.run(sys.argv)
