#!/usr/bin/env python3

import json
import sys
import os
import math
import urllib.request
from datetime import datetime
from dataclasses import dataclass
from enum import Enum

import gi

gi.require_version("Gtk", "4.0")
gi.require_version("Adw", "1")
from gi.repository import Gtk, Adw, Gdk, Gio
from gi.repository import Pango, PangoCairo
from gi.repository import Poppler


@dataclass
class Talk:
    title: str
    first_name: str
    last_name: str
    slides_name: str
    slides_url: str


class Session:
    def __init__(self, api_dict):
        self.start = self.get_time_from_field(api_dict, "start")
        self.end = self.get_time_from_field(api_dict, "end")

        talks = api_dict.get("talks")
        self.talks = self.create_talks(talks)

    def get_time_from_field(self, d, field_name):
        timestamp = d.get(field_name).replace("Z", "+00:00")
        return datetime.fromisoformat(timestamp)

    def create_talks(self, json_talks):
        talks = []
        for t in json_talks:
            talks.append(
                Talk(
                    title=t.get("title"),
                    first_name=t.get("first_name"),
                    last_name=t.get("last_name"),
                    slides_name=t.get("slides_name"),
                    slides_url=t.get("slides_url"),
                )
            )
        return talks

    def fetch_talk_slides(self):
        os.makedirs("slides", exist_ok=True)

        for talk in self.talks:
            path = os.path.join("slides", talk.slides_name)
            if not os.path.isfile(path):
                print(f"{path} isn't available locally, fetching...")
                urllib.request.urlretrieve(talk.slides_url, path)


class Mode(Enum):
    INTRO = 1
    TITLE = 2
    PRESENTATION = 3


@dataclass
class State:
    mode: Mode
    current_talk_time_started: datetime
    session: Session
    page: int


TITLE_FONT = "Inter Bold 40"
TITLE_FONT_DEC = Pango.font_description_from_string(TITLE_FONT)
AUTHOR_FONT = "Inter Normal 20"
AUTHOR_FONT_DEC = Pango.font_description_from_string(AUTHOR_FONT)


class MainWindow(Adw.ApplicationWindow):
    def __init__(self, state, *args, **kwargs):
        super().__init__(title="Slides", *args, **kwargs)
        self.state = state

        self.is_fullscreen = False

        evk = Gtk.EventControllerKey.new()
        evk.connect("key-pressed", self.key_press)
        self.add_controller(evk)

        self.dw = Gtk.DrawingArea()

        self.dw.set_hexpand(True)
        self.dw.set_vexpand(True)

        self.dw.set_draw_func(self.draw, None)
        self.set_content(self.dw)

        self.doc = Poppler.Document.new_from_file(
            "file://" + os.path.abspath("slides/helios_lt.pdf")
        )
        self.pages_count = self.doc.get_n_pages()
        print(f"got {self.pages_count=}")
        self.update_page()
        print(f"{self.page.get_size()=}")

    def update_page(self):
        self.page = self.doc.get_page(self.state.page)
        self.page_x, self.page_y = self.page.get_size()

    def draw(self, area, c, w, h, data):
        if self.state.mode == Mode.INTRO:
            self.draw_intro(area, c, w, h, data)
        if self.state.mode == Mode.PRESENTATION:
            self.draw_presentation(area, c, w, h, data)

    def draw_presentation(self, area, c, w, h, data):
        c.set_source_rgb(0, 0, 0)
        c.paint()

        c.save()
        width_scale = w / self.page_x
        height_scale = h / self.page_y
        if width_scale > height_scale:
            scale = height_scale
        else:
            scale = width_scale

        c.scale(scale, scale)
        try:
            self.page.render(c)
        finally:
            c.restore()

    def draw_intro(self, area, c, w, h, data):
        c.set_source_rgb(0.9, 0.9, 0.9)
        c.paint()

        c.set_source_rgb(0.1, 0.1, 0.1)

        layout = PangoCairo.create_layout(c)

        layout.set_text("Introducing Helios", -1)
        layout.set_font_description(TITLE_FONT_DEC)

        c.save()
        c.set_source_rgb(0.1, 0, 0.1)
        c.move_to(25, h - (h / 3) - 60)
        PangoCairo.show_layout(c, layout)
        c.restore()

        layout.set_text("Joe Blogs", -1)
        layout.set_font_description(AUTHOR_FONT_DEC)

        c.save()
        c.set_source_rgb(0.3, 0.2, 0.3)
        c.move_to(25, h - (h / 3))
        PangoCairo.show_layout(c, layout)
        c.restore()

    def toggle_fullscreen(self):
        self.is_fullscreen = not self.is_fullscreen
        if self.is_fullscreen:
            self.fullscreen()
        else:
            self.unfullscreen()

    def key_press(self, event, keyval, keycode, state):
        if keyval == Gdk.KEY_q and state & Gdk.ModifierType.CONTROL_MASK:
            self.destroy()
        elif keyval == Gdk.KEY_f and state & Gdk.ModifierType.CONTROL_MASK:
            self.toggle_fullscreen()
        elif keyval == Gdk.KEY_space:
            if self.state.mode == Mode.INTRO:
                print("starting presentation")
                self.state.mode = Mode.PRESENTATION
            if self.state.mode == Mode.PRESENTATION:
                self.state.page += 1
                self.update_page()
            self.dw.queue_draw()


class PreviewWindow(Adw.ApplicationWindow):
    def __init__(self, *args, **kwargs):
        super().__init__(title="Preview", *args, **kwargs)


class LightningClient(Adw.Application):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.connect("activate", self.on_activate)

        with open("session_1.json") as f:
            self.session = Session(json.load(f))
        print(self.session.start)
        print(self.session.end)
        print(self.session.talks)
        self.session.fetch_talk_slides()
        self.state = State(
            mode=Mode.INTRO,
            current_talk_time_started=datetime.now(),
            session=self.session,
            page=0,
        )

    def on_activate(self, app):
        self.win = MainWindow(state=self.state, application=app)
        self.win.present()

        self.preview_win = PreviewWindow(application=app)
        self.preview_win.present()


app = LightningClient(application_id="org.fosdem.LightningTalkClient")
app.run(sys.argv)
